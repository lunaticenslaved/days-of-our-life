// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FoodQuantityConverter {
  id        String  @id @default(uuid()) @db.Uuid
  grams     Float   @db.Real
  name      String  @db.VarChar(255)
  isDeleted Boolean @default(false)

  recipeId String?     @db.Uuid
  recipe   FoodRecipe? @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  productId String?      @db.Uuid
  product   FoodProduct? @relation(fields: [productId], references: [id], onDelete: Cascade)

  mealItems FoodMealItem[]
}

model FoodProduct {
  id           String  @id @default(uuid()) @db.Uuid
  name         String  @unique @db.VarChar(255)
  manufacturer String? @db.VarChar(255)
  isDeleted    Boolean @default(false)

  nutrientsPerGramId String        @unique @db.Uuid
  nutrientsPerGram   FoodNutrients @relation(fields: [nutrientsPerGramId], references: [id], onDelete: Restrict)

  quantities        FoodQuantityConverter[]
  recipeIngrediends FoodRecipeIngredient[]
  mealIngreients    FoodMealItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodRecipe {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @db.VarChar(255)
  description String  @db.Text
  isDeleted   Boolean @default(false)

  nutrientsPerGramId String        @unique @db.Uuid
  nutrientsPerGram   FoodNutrients @relation(fields: [nutrientsPerGramId], references: [id], onDelete: Restrict)

  outputId String           @unique @db.Uuid
  output   FoodRecipeOutput @relation(fields: [outputId], references: [id], onDelete: Restrict)

  parts          FoodRecipePart[]
  mealIngreients FoodMealItem[]
  quantities     FoodQuantityConverter[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodRecipePart {
  id          String  @id @default(uuid()) @db.Uuid
  title       String  @db.VarChar(255)
  description String? @db.Text

  recipeId String     @db.Uuid
  recipe   FoodRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  ingredients FoodRecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodNutrients {
  id String @id @default(uuid()) @db.Uuid

  calories Float @default(0) @db.Real
  proteins Float @default(0) @db.Real
  fats     Float @default(0) @db.Real
  carbs    Float @default(0) @db.Real
  fibers   Float @default(0) @db.Real

  product         FoodProduct?
  recipe          FoodRecipe?
  trackerMealItem FoodMealItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodRecipeIngredient {
  id          String  @id @default(uuid()) @db.Uuid
  grams       Float   @db.Real
  description String? @db.VarChar(255)

  productId String      @db.Uuid
  product   FoodProduct @relation(fields: [productId], references: [id], onDelete: Restrict)

  recipePartId String         @db.Uuid
  recipePart   FoodRecipePart @relation(fields: [recipePartId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodRecipeOutput {
  id       String @id @default(uuid()) @db.Uuid
  grams    Float  @db.Real
  servings Float  @db.Real

  recipe FoodRecipe?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodMealItem {
  id       String @id @default(uuid()) @db.Uuid
  quantity Float  @db.Real

  quantityConverterId String                @db.Uuid
  quantityConverter   FoodQuantityConverter @relation(fields: [quantityConverterId], references: [id], onDelete: Restrict)

  dayId String @db.Uuid
  day   Day    @relation(fields: [dayId], references: [id], onDelete: Restrict)

  dayPartId String  @db.Uuid
  dayPart   DayPart @relation(fields: [dayPartId], references: [id], onDelete: Restrict)

  recipeId String?     @db.Uuid
  recipe   FoodRecipe? @relation(fields: [recipeId], references: [id], onDelete: Restrict)

  productId String?      @db.Uuid
  product   FoodProduct? @relation(fields: [productId], references: [id], onDelete: Restrict)

  nutrientsId String        @unique @db.Uuid
  nutrients   FoodNutrients @relation(fields: [nutrientsId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BodyStatistics {
  id     String   @id @default(uuid()) @db.Uuid
  date   DateTime @unique
  weight Float    @db.Real

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FemalePeriod {
  id String @id @default(uuid()) @db.Uuid

  startDayId String @unique @db.Uuid
  startDay   Day    @relation(fields: [startDayId], references: [id], onDelete: Restrict)

  nextPeriodId String?       @unique @db.Uuid
  nextPeriod   FemalePeriod? @relation(name: "nextFemalePeriod", fields: [nextPeriodId], references: [id], onDelete: SetNull)
  prevPeriod   FemalePeriod? @relation(name: "nextFemalePeriod")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Day {
  id   String   @id @default(uuid()) @db.Uuid
  date DateTime

  cosmeticProducts    CosmeticProductApplication[]
  femalePeriodStarted FemalePeriod?
  medicaments         MedicamentIntake[]
  foodMealItems       FoodMealItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date])
}

model DayPart {
  id    String @id @default(uuid()) @db.Uuid
  name  String @unique @db.VarChar(255)
  order Int    @default(autoincrement()) @db.SmallInt

  medicamentIntakes      MedicamentIntake[]
  cosmeticProductApplied CosmeticProductApplication[]
  foodMealItems          FoodMealItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medicament {
  id        String  @id @default(uuid()) @db.Uuid
  name      String  @db.VarChar(255)
  isDeleted Boolean @default(false)

  intakes MedicamentIntake[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MedicamentIntake {
  id String @id @default(uuid()) @db.Uuid

  dayId String @db.Uuid
  day   Day    @relation(fields: [dayId], references: [id], onDelete: Restrict)

  dayPartId String  @db.Uuid
  dayPart   DayPart @relation(fields: [dayPartId], references: [id], onDelete: Restrict)

  medicamentId String     @db.Uuid
  medicament   Medicament @relation(fields: [medicamentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([medicamentId, dayPartId, dayId])
}

model CosmeticProduct {
  id           String @id @default(uuid()) @db.Uuid
  name         String @db.VarChar(255)
  manufacturer String @db.VarChar(255)

  applied CosmeticProductApplication[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CosmeticProductApplication {
  id String @id @default(uuid()) @db.Uuid

  dayId String @db.Uuid
  day   Day    @relation(fields: [dayId], references: [id], onDelete: Restrict)

  dayPartId String  @db.Uuid
  dayPart   DayPart @relation(fields: [dayPartId], references: [id], onDelete: Restrict)

  cosmeticProductId String          @db.Uuid
  cosmeticProduct   CosmeticProduct @relation(fields: [cosmeticProductId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cosmeticProductId, dayPartId, dayId])
}

model CosmeticIngredient {
  id String @id @default(uuid()) @db.Uuid

  name String @db.Char(255)

  benefits CosmeticBenefit[]
  recipes  CosmeticRecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model CosmeticBenefit {
  id String @id @default(uuid()) @db.Uuid

  name String @db.Char(255)

  parentId String?          @db.Uuid
  parent   CosmeticBenefit? @relation("CosmeticBenefitToTarget", fields: [parentId], references: [id], onDelete: Restrict)

  children    CosmeticBenefit[]    @relation("CosmeticBenefitToTarget")
  ingredients CosmeticIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model CosmeticRecipe {
  id String @id @default(uuid()) @db.Uuid

  name        String                @db.Char(255)
  description String?               @db.VarChar(1000)
  phases      CosmeticRecipePhase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name])
}

model CosmeticRecipePhase {
  id String @id @default(uuid()) @db.Uuid

  name String @db.Char(255)

  recipe   CosmeticRecipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId String         @db.Uuid

  ingredients CosmeticRecipeIngredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recipeId, name])
}

model CosmeticRecipeIngredient {
  id String @id @default(uuid()) @db.Uuid

  percent Int @db.SmallInt

  comment String? @db.VarChar(255)

  ingredientId String             @db.Uuid
  ingredient   CosmeticIngredient @relation(fields: [ingredientId], references: [id], onDelete: Restrict)

  phaseId String              @db.Uuid
  phase   CosmeticRecipePhase @relation(fields: [phaseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ingredientId, phaseId])
}
